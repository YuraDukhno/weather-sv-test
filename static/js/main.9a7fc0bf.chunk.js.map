{"version":3,"sources":["API.js","Components/Favorites.jsx","Components/UI/Autocomplete/index.jsx","Components/HomePage.jsx","Components/Header/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["apiKey","process","REACT_APP_API_KEY","baseUrl","get5dayDailyForecast","locationKey","a","axios","get","data","console","log","getLocations","query","Favorites","favorites","getWeather","history","useHistory","favoriteClickHandler","favorite","push","className","length","map","onClick","label","currWeather","Autocomplete","options","onKeyDown","onChange","onSelect","value","onBlur","placeholder","otherProps","find","option","HomePage","daily","addFavorite","removeFavorite","currCity","useState","cities","setCities","setInput","todaysForecast","locationSearchHandler","e","target","trim","response","location","Key","LocalizedName","id","some","type","style","margin","Temperature","Maximum","Value","display","flexDirection","alignItems","padding","Fragment","alignContent","boxShadow","borderRadius","Minimum","Day","IconPhrase","Night","listStyle","justifyContent","item","Date","textAlign","slice","Header","to","App","state","getDaily","setState","DailyForecasts","updatedFavorites","filter","this","exact","path","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9a7fc0bf.chunk.js","sourcesContent":["import axios from \"axios\";\n\n\n// ! Key from .env.development\nconst apiKey = process.env.REACT_APP_API_KEY;\n\nconst baseUrl = \"http://dataservice.accuweather.com\";\n\n\n// ! Get 5 days forecast.\nexport async function get5dayDailyForecast(locationKey) {\n  try {\n    const { data } = await axios.get(\n      `${baseUrl}/forecasts/v1/daily/5day/${locationKey}?apikey=${apiKey}`\n    );\n    return data;\n  } catch (e) {\n    console.log(\"e\", e);\n    throw e;\n  }\n}\n\n// ! Get default daily forecast.\nexport async function getCurrWeather(locationKey) {\n  try {\n    const { data } = await axios.get(\n      `${baseUrl}/currentconditions/v1/${locationKey}?apikey=${apiKey}`\n    );\n    return data;\n  } catch (e) {\n    console.log(\"e\", e);\n    throw e;\n  }\n}\n\n// ! Get data for autocomplete.\nexport async function getLocations(query) {\n  try {\n    const { data } = await axios.get(\n      `${baseUrl}/locations/v1/cities/autocomplete?apikey=${apiKey}&q=${query}`\n    );\n    return { data, query };\n  } catch (e) {\n    console.log(e);\n    throw e;\n  }\n}\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nexport default function Favorites({ favorites, getWeather }) {\n  const history = useHistory();\n\n  // ! Handler to put a favorite to homepage.\n  const favoriteClickHandler = async favorite => {\n    history.push(\"/\");\n    await getWeather(favorite);\n  };\n  return (\n    <div>\n      <h3>Favorites</h3>\n      <div className=\"container-fluid\">\n        {favorites.length ? (\n          <div>\n            {favorites.map(favorite => (\n              <button onClick={() => favoriteClickHandler(favorite)}>\n                <div className=\"card mb-2\">\n                  <div className=\"card-body\">\n                    <h5 className=\"card-title\">{favorite.label}</h5>\n                    <p className=\"card-text\">\n                      {favorite.currWeather - 32}&deg;\n                    </p>\n                  </div>\n                </div>\n              </button>\n            ))}\n          </div>\n        ) : (\n          <div>No favorites added</div>\n        )}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Select from \"react-select\";\n\nconst Autocomplete = ({\n  // ! props\n  options,\n  onChange,\n  onKeyDown,\n  onSelect,\n  onBlur,\n  value,\n  placeholder,\n  ...otherProps\n}) => (\n  <Select\n    placeholder={placeholder}\n    onKeyDown={onKeyDown}\n    options={options}\n    value={options.find(option => option.value === value)}\n    onChange={onSelect}\n    {...otherProps}\n  />\n);\n\nexport default Autocomplete;\n","import React, { useState } from \"react\";\nimport Autocomplete from \"./UI/Autocomplete\";\nimport { getLocations } from \"../API\";\n\nexport default function HomePage({\n  // ! props\n  daily,\n  getWeather,\n  favorites,\n  addFavorite,\n  removeFavorite,\n  currCity,\n}) {\n  const [cities, setCities] = useState([]);\n  const [input, setInput] = useState();\n\n  const [todaysForecast] = daily;\n\n  // ! Handler for search.\n  const locationSearchHandler = async e => {\n    const { value } = e.target;\n    setInput(value);\n\n    // ! if input in not empty.\n    if (value.trim()) {\n      const response = await getLocations(value);\n      // ! if response successful.\n      if (response) {\n        setCities(\n          response.data.map(location => ({\n            value: location.Key,\n            label: location.LocalizedName,\n          }))\n        );\n      }\n    }\n  };\n\n  return (\n    <div>\n      <main className=\"container-fluid\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <Autocomplete\n              placeholder=\"Type location\"\n              onKeyDown={locationSearchHandler}\n              options={cities}\n              onSelect={({ value, label }) => {\n                getWeather({ id: value, label });\n              }}\n            />\n          </div>\n          <div className=\"col\">\n            <div className=\"\">\n              {/* // ! Show buttons depending on whether there is a city in favorites. */}\n              {favorites.some(favorite => favorite.id === currCity.id) ? (\n                <button\n                  type=\"submit\"\n                  className=\"btn btn-danger\"\n                  style={{ margin: \"2px\" }}\n                  onClick={() => removeFavorite(currCity.id)}\n                >\n                  Remove from favorites\n                </button>\n              ) : (\n                <button\n                  type=\"submit\"\n                  className=\"btn btn-success\"\n                  style={{ margin: \"2px\" }}\n                  onClick={() =>\n                    addFavorite(\n                      currCity,\n                      todaysForecast.Temperature.Maximum.Value\n                    )\n                  }\n                >\n                  Add to favorites\n                </button>\n              )}\n            </div>\n          </div>\n        </div>\n        <div\n          className=\"cards\"\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            margin: \"10px\",\n            padding: \"10px\",\n          }}\n        >\n          {/* // !  TODAY FORECAST */}\n          {todaysForecast && currCity && (\n            <React.Fragment>\n              <h2>{currCity.label}</h2>\n              <div\n                style={{\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                  alignContent: \"center\",\n                  boxShadow: \"2px 2px 10px\",\n                  margin: \"10px\",\n                  padding: \"5px\",\n                  borderRadius: \"10px\",\n                }}\n              >\n                <h3 style={{ padding: \"2.5px\" }}>\n                  Max: {todaysForecast.Temperature.Maximum.Value - 32}&deg;\n                </h3>\n                <h3 style={{ padding: \"2.5px\" }}>\n                  Min: {todaysForecast.Temperature.Minimum.Value - 32}&deg;\n                </h3>\n              </div>\n              <h4>Day: {todaysForecast.Day.IconPhrase}</h4>\n              <h4>Night: {todaysForecast.Night.IconPhrase}</h4>\n            </React.Fragment>\n          )}\n        </div>\n        <div>\n          <ul\n            style={{\n              listStyle: \"none\",\n              display: \"flex\",\n              justifyContent: \"space-around\",\n              margin: \"0\",\n              padding: \"0\",\n            }}\n          >\n            {daily.map(item => {\n              const { Temperature, Date } = item;\n              return (\n                <li style={{ textAlign: \"center\", padding: \"5px\" }}>\n                  <p>{Date.slice(0, 10)}</p>\n                  <span>Max: {Temperature.Maximum.Value - 32}&deg;</span>\n                  <br />\n                  <span>Min: {Temperature.Minimum.Value - 32}&deg;</span>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      </main>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Header = () => {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-light fixed-top\">\n      <div className=\"container\">\n        <Link className=\"navbar-brand\" to={\"/\"}>\n          Weather App\n        </Link>\n        <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo02\">\n          <ul className=\"navbar-nav ml-auto\">\n            <li className=\"nav-item\">\n              <Link className=\"nav-link\" to={\"/\"}>\n                Home\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link className=\"nav-link\" to={\"/favorites\"}>\n                Favorites\n              </Link>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </nav>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport { get5dayDailyForecast } from \"./API\";\nimport { HashRouter as Router, Switch, Route} from \"react-router-dom\";\nimport Favorites from \"./Components/Favorites\";\nimport HomePage from \"./Components/HomePage\"\nimport Header from \"./Components/Header\";\nimport \"./App.css\";\nimport \"weather-icons/css/weather-icons.css\";\n\n\nclass App extends React.Component {\n  state = {\n    daily: [],\n    favorites: [],\n    currCity: {},\n  };\n\n  // ! Get daily forecast when component is mounted.\n  componentDidMount() {\n    this.getDaily();\n  }\n\n  // ! Get daily forecast\n  getDaily = async ({ id, label } = { id: \"215854\", label: \"Tel Aviv\" }) => {\n    const data = await get5dayDailyForecast(id);\n    this.setState({\n      daily: data.DailyForecasts,\n      currCity: { id, label },\n    });\n  };\n\n  // ! Add to favorite.\n  addFavorite = (location, currWeather) => {\n    const updatedFavorites = [\n      ...this.state.favorites,\n      { ...location, currWeather },\n    ];\n    this.setState({\n      favorites: updatedFavorites,\n    });\n  };\n\n  // ! Remove from favorite.\n  removeFavorite = (id) => {\n    const updatedFavorites = [...this.state.favorites].filter(\n      (favorite) => favorite.id !== id\n    );\n    this.setState({\n      favorites: updatedFavorites,\n    });\n  };\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Header />\n          <div className=\"auth-wrapper\">\n            <div className=\"auth-inner\">\n              <Switch>\n                <Route exact path=\"/\">\n                  <HomePage\n                    daily={this.state.daily}\n                    getWeather={this.getDaily}\n                    favorites={this.state.favorites}\n                    addFavorite={this.addFavorite}\n                    removeFavorite={this.removeFavorite}\n                    currCity={this.state.currCity}\n                  />\n                </Route>\n                <Route path=\"/favorites\">\n                  <Favorites\n                    favorites={this.state.favorites}\n                    getWeather={this.getDaily}\n                  />\n                </Route>\n              </Switch>\n            </div>\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}